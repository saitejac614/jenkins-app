pipeline {
    agent any
    environment {
        PATH = "C:\\Program Files\\Java\\jdk-22\\bin;C:\\Program Files\\apache-maven-3.9.9\\bin;C:\\Windows\\System32;${env.PATH}"
        JAVA_HOME = "C:\\Program Files\\Java\\jdk-22"
    }
    stages {
        stage('Test Shell Command') {
            steps {
                bat 'echo "Shell is working!"'
            }
        }
        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s\\spring-boot-app') {
                    powershell '''
                        $ErrorActionPreference = "Stop"
                        Write-Output "Current PATH: $env:PATH"
                        Write-Output "JAVA_HOME is set to: $env:JAVA_HOME"
                        & "C:\\Program Files\\apache-maven-3.9.9\\bin\\mvn.cmd" -Dmaven.repo.local="$env:WORKSPACE\\.m2\\repository" clean package
                    '''
                }
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        dir('java-maven-sonar-argocd-helm-k8s\\spring-boot-app') {
                            bat 'mvn sonar:sonar -Dsonar.login=%SONAR_TOKEN%'
                        }
                    }
                }
            }
        }
        stage('Test Docker') {
            steps {
                script {
                    bat 'docker run hello-world'
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        dir('java-maven-sonar-argocd-helm-k8s\\spring-boot-app') {
                            bat '''
                                setlocal
                                echo Logging into Docker Hub...
                                echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin
                                echo Building Docker image...
                                docker build -t saitejac614/jenkins-app:%BUILD_NUMBER% .
                                docker push saitejac614/jenkins-app:%BUILD_NUMBER%
                            '''
                        }
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "jenkins-app"
                GIT_USER_NAME = "saitejac614"
            }
            steps {
                withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                    bat '''
                        setlocal
                        git config user.email "cheemarlasaiteja.1999@gmail.com"
                        git config user.name "saitejac614"
                        git checkout main
                        git config pull.rebase false
                        git pull https://%GITHUB_TOKEN%@github.com/%GIT_USER_NAME%/%GIT_REPO_NAME% main
                        
                        REM Update the deployment file with the new image tag
                        powershell -Command "(Get-Content java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml) -replace 'saitejac614/jenkins-app:.*', 'saitejac614/jenkins-app:%BUILD_NUMBER%' | Set-Content java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml"
                        
                        REM Commit and push the updated deployment file
                        git add java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml
                        git commit -m "Update deployment image to version %BUILD_NUMBER%"
                        git push https://%GITHUB_TOKEN%@github.com/%GIT_USER_NAME%/%GIT_REPO_NAME% main
                    '''
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished. Check logs for details.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more details.'
        }
    }
}
