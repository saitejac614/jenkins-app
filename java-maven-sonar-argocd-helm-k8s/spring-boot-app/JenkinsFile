pipeline {
    agent any
    environment {
        PATH = "/bin:/usr/bin:/usr/local/bin:$PATH"
        JAVA_HOME = "/opt/homebrew/Cellar/openjdk/22.0.2/libexec/openjdk.jdk/Contents/Home"
    }
    stages {
        stage('Test Shell Command') {
            steps {
                sh '/bin/bash -c "echo Shell is working!"'
            }
        }
        stage('Build and Test') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'echo "Current PATH: $PATH"'
                    sh 'echo "JAVA_HOME is set to: $JAVA_HOME"'
                    sh 'mvn -Dmaven.repo.local=${WORKSPACE}/.m2/repository clean package'
                }
            }
        }
        stage('Run SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                        }
                    }
                }
            }
        }
        stage('Test Docker') {
            steps {
                script {
                    sh 'docker run hello-world'
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                            sh '''
                                echo "Logging into Docker Hub..."
                                echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                                echo "Building Docker image..."
                                docker build -t saitejac614/jenkins-app:${BUILD_NUMBER} .
                                docker push saitejac614/jenkins-app:${BUILD_NUMBER}
                            '''
                        }
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "jenkins-app"
                GIT_USER_NAME = "saitejac614"
            }
            steps {
                withCredentials([string(credentialsId: 'github-cred', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "testpen008@gmail.com"
                        git config user.name "Saiteja"
                        git checkout main
                        git config pull.rebase false
                        git pull https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
                        
                        # Update the deployment file with the new image tag
                        sed -i '' "s|saitejac614/jenkins-app:.*|saitejac614/jenkins-app:${BUILD_NUMBER}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        # Commit and push the updated deployment file
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
                    '''
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished. Check logs for details.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more details.'
        }
    }
}
